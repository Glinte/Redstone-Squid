name: Continuous Integration

permissions:
  contents: read

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        # Install a specific version of uv.
        version: "0.6.14"
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install the project
      run: uv sync --all-extras --dev

    - name: Check that requirements are up to date
      # Basically, we generate the requirements files from the uv.lock file in CI
      # and strip the first line (the uv export comment) before diffing them
      run: |
        tmpdir=$(mktemp -d)
        uv export --output-file "$tmpdir/base.txt" --quiet
        uv export --only-dev --output-file "$tmpdir/dev.txt" --quiet

        # Normalize the first line (the uv export comment) before diffing
        tail -n +2 "$tmpdir/base.txt" > "$tmpdir/base_stripped.txt"
        tail -n +2 "$tmpdir/dev.txt" > "$tmpdir/dev_stripped.txt"
        tail -n +2 requirements/base.txt > "$tmpdir/base_expected_stripped.txt"
        tail -n +2 requirements/dev.txt > "$tmpdir/dev_expected_stripped.txt"

        diff_output=0

        diff -u "$tmpdir/base_stripped.txt" "$tmpdir/base_expected_stripped.txt" || diff_output=1
        diff -u "$tmpdir/dev_stripped.txt" "$tmpdir/dev_expected_stripped.txt" || diff_output=1

        if [ $diff_output -ne 0 ]; then
          echo "requirements/*.txt files are not up to date with uv.lock."
          echo "Run the following commands and commit the changes:"
          echo "  uv export -o requirements/base.txt"
          echo "  uv export --only-dev -o requirements/dev.txt"
          exit 1
        fi

    - name: Check all files have corresponding gitattributes
      run: |  # https://github.com/gitattributes/gitattributes
        missing_attributes=$(git ls-files | git check-attr -a --stdin | grep 'text: auto' || printf '\n')
        if [ -n "$missing_attributes" ]; then
          printf '%s\n%s\n' '.gitattributes rule missing for the following files:' "$missing_attributes"
        else
          printf '%s\n' 'All files have a corresponding rule in .gitattributes'
        fi

    - name: See if there are linting issues
      run: uv run ruff check --extend-select I

    - name: See if there are formatting issues
      run: uv run ruff format --target-version py312 --check

    - name: See if there are type checking issues
      run: uv run basedpyright --level=warning

    - name: Run tests
      run: uv run pytest tests --cov=squid --cov-report=term-missing --cov-report=html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage (${{ github.event_name }}) (${{ matrix.python-version }})
        path: htmlcov/

    - name: Minimize uv cache
      run: uv cache prune --ci