-- noinspection SqlNoDataSourceInspectionForFile

create table if not exists
  server_settings (
    server_id bigint primary key not null,
    smallest_channel_id bigint unique,
    fastest_channel_id bigint unique,
    first_channel_id bigint unique
  );

create table if not exists
  submissions (
    submission_id bigint generated by default as identity primary key,
    submission_status int not null default 0,
    last_update timestamp default current_timestamp,
    record_category text not null,
    door_width int not null,
    door_height int not null,
    pattern text,
    door_type text not null,
    wiring_placement_restrictions text,
    component_restrictions text,
    information text,
    build_width int not null check (build_width > 0),
    build_height int not null check (build_height > 0),
    build_depth int not null check (build_depth > 0),
    normal_closing_time bigint check (normal_closing_time >= 0 or normal_closing_time is null),
    normal_opening_time bigint check (normal_opening_time >= 0 or normal_opening_time is null),
    visible_closing_time bigint check (visible_closing_time >= 0 or visible_closing_time is null),
    visible_opening_time bigint check (visible_opening_time >= 0 or visible_opening_time is null),
    date_of_creation text,
    submission_time timestamp default current_timestamp,
    creators_ign text,
    locationality text,
    directionality text,
    functional_versions text,
    image_link text,
    video_link text,
    world_download_link text,
    server_ip text,
    coordinates text,
    command_to_build text,
    submitted_by text,
    constraint check_record_category check (record_category in ('Smallest', 'Fastest', 'First', 'Smallest Fastest', 'Fastest Smallest', null)),
    constraint check_door_type check (door_type in ('Door', 'Trapdoor', 'Skydoor')),
    constraint check_locationality check (locationality in (null, 'Locational', 'Locational with fixes')),
    constraint checK_directionality check (directionality in (null, 'Directional', 'Directional with fixes')),
    constraint check_status check (submission_status in (0, 1, 2))
  );

create table if not exists
  messages (
    server_id bigint not null,
    submission_id bigint,
    channel_id text,
    message_id text,
    last_updated timestamp default current_timestamp,
    constraint fk_server_id foreign key (server_id) references server_settings(server_id),
    constraint fk_submission_id foreign key (submission_id) references submissions(submission_id),
    primary key (server_id, submission_id)
  );

create or replace function get_outdated_messages (server_id_input bigint)
returns setof messages
as $$
  begin
    return query select messages.*
    from messages join submissions
    on (messages.submission_id = submissions.submission_id)
    where messages.last_updated < submissions.last_update
    and messages.server_id = server_id_input
    and submissions.submission_status = 1;  -- accepted
  end;
$$ language plpgsql;

create or replace function get_unsent_submissions (server_id_input bigint)
returns setof submissions
as $$
  begin
    return query select *
    from submissions
    where submission_id not in (
      select submission_id
      from messages
      where server_id = server_id_input
      )
    and submission_status = 1;  -- accepted
  end;
$$ language plpgsql;
